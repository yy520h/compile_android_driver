name: 终极安卓内核下载方案

on:
  workflow_dispatch:

jobs:
  fetch_kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # 使用已验证有效的版本组合
        include:
          - { android: 11, kernel: "4.14", branch: "common-android11-4.14" }  # 官方文档显示Android 11使用4.14
          - { android: 12, kernel: "5.10", branch: "common-android12-5.10" }  # Android 12标准分支
          - { android: 13, kernel: "5.15", branch: "common-android13-5.15" }  # Android 13有效分支
          - { android: 14, kernel: "6.1", branch: "android14-6.1" }           # Android 14最新分支命名
          - { android: 15, kernel: "6.6", branch: "android-mainline-6.6" }    # Android 15最新分支命名

    steps:
      - name: 设置工作目录
        run: |
          WORK_DIR="android_${{ matrix.android }}_${{ matrix.kernel }}"
          mkdir -p $WORK_DIR
          cd $WORK_DIR
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=android${{ matrix.android }}-kernel${{ matrix.kernel }}.zip" >> $GITHUB_ENV
          echo "使用预定义分支: ${{ matrix.branch }}"

      - name: 安装必要工具
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git-core python3 python3-pip p7zip
          pip3 install -U repo
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > repo
          chmod +x repo

      # 动态镜像选择 + 官方源备用
      - name: 初始化仓库
        run: |
          cd ${{ env.WORK_DIR }}
          
          # 镜像源列表（优先级排序）
          MIRRORS=(
            "https://android.googlesource.com/kernel/manifest"              # 官方源
            "https://mirrors.tuna.tsinghua.edu.cn/git/kernel/manifest"      # 清华镜像
            "https://mirrors.ustc.edu.cn/aosp-kernel/manifest"              # USTC镜像
          )
          
          for MIRROR_URL in "${MIRRORS[@]}"; do
            echo "尝试镜像: $MIRROR_URL"
            if ../repo init -u "$MIRROR_URL" -b ${{ matrix.branch }}; then
              echo "镜像 $MIRROR_URL 初始化成功"
              break
            fi
          done

      - name: 同步源代码（加强重试）
        run: |
          cd ${{ env.WORK_DIR }}
          # 增加重试次数和间隔
          for i in {1..5}; do
            echo "同步尝试 $i/5"
            if ../repo sync -c -j4 --no-tags --optimized-fetch --force-sync; then
              echo "同步成功"
              exit 0
            fi
            echo "同步失败，等待30秒后重试..."
            sleep 30
          done
          echo "::error::同步失败超过5次"
          exit 100

      - name: 压缩源代码
        run: |
          cd ${{ env.WORK_DIR }}
          # 检查是否同步成功
          if [ -d .repo ]; then
            7z a ${{ env.ARCHIVE_NAME }} .
          else
            echo "错误: 同步失败" > error.txt
            7z a ${{ env.ARCHIVE_NAME }} error.txt
          fi

      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.WORK_DIR }}/${{ env.ARCHIVE_NAME }}
          retention-days: 7

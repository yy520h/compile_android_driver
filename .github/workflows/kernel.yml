name: 可靠获取Google Android内核

on:
  workflow_dispatch:
  
jobs:
  fetch_kernels:
    name: 获取内核源码 (A${{ matrix.android }} K${{ matrix.kernel }})
    runs-on: ubuntu-latest
    timeout-minutes: 120

    # 关键配置：禁止任务连锁失败
    strategy:
      fail-fast: false
      matrix:
        include:
          - { android: 11, kernel: 5.4 }
          - { android: 12, kernel: 5.4 }
          - { android: 13, kernel: 5.10 }
          - { android: 14, kernel: 5.15 }
          - { android: 14, kernel: 6.1 }
          - { android: 15, kernel: 6.1 }

    steps:
      - name: 检查仓库
        uses: actions/checkout@v4

      - name: 创建专用目录
        run: |
          WORK_DIR="android-${{ matrix.android }}-kernel-${{ matrix.kernel }}"
          mkdir -p "$WORK_DIR"
          echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=$WORK_DIR.zip" >> $GITHUB_ENV

      - name: 安装依赖项
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git curl python3 python3-pip p7zip-full
          sudo pip3 install repo
          # 配置必要的Git设置
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git config --global color.ui false

      # 核心修复：动态确定正确分支
      - name: 确定正确的分支名称
        id: determine_branch
        run: |
          # 生成可能的分支名称候选
          CANDIDATE_BRANCHES=(
            "common-android${{ matrix.android }}-${{ matrix.kernel }}"
            "android-${{ matrix.android }}-${{ matrix.kernel }}"
            "android${{ matrix.android }}-${{ matrix.kernel }}"
          )
          
          # 安卓15的特殊分支命名
          if [ ${{ matrix.android }} -eq 15 ]; then
            CANDIDATE_BRANCHES+=("android-mainline-${{ matrix.kernel }}")
            CANDIDATE_BRANCHES+=("android15-${{ matrix.kernel }}")
          fi
          
          # 尝试寻找存在的分支
          BRANCH_FOUND=0
          for BRANCH in "${CANDIDATE_BRANCHES[@]}"; do
            echo "检查分支: $BRANCH"
            if curl -sI "https://android.googlesource.com/kernel/manifest/+/refs/heads/$BRANCH" | grep -q "200 OK"; then
              echo "找到有效分支: $BRANCH"
              echo "REAL_BRANCH=$BRANCH" >> $GITHUB_ENV
              BRANCH_FOUND=1
              break
            fi
          done
          
          if [ $BRANCH_FOUND -eq 0 ]; then
            echo "::error::未找到有效的内核分支！"
            echo "REAL_BRANCH=invalid" >> $GITHUB_ENV
          fi
          
      - name: 初始化仓库
        if: env.REAL_BRANCH != 'invalid'
        run: |
          cd "$WORK_DIR"
          echo "初始化分支: $REAL_BRANCH"
          repo init -u https://android.googlesource.com/kernel/manifest -b $REAL_BRANCH

      - name: 同步源代码
        if: env.REAL_BRANCH != 'invalid'
        run: |
          cd "$WORK_DIR"
          # 重试机制（最多3次）
          for i in {1..3}; do
            echo "同步尝试 $i/3"
            if repo sync -c -j$(nproc) --no-tags --optimized-fetch --force-sync; then
              echo "同步成功"
              break
            fi
            echo "同步失败，等待10秒后重试..."
            sleep 10
          done

      - name: 压缩源代码
        run: |
          cd "$WORK_DIR"
          if [ "$REAL_BRANCH" != "invalid" ]; then
            # 压缩成功同步的代码
            7z a -r -mx=7 "../$ARCHIVE_NAME" .
            echo "COMPRESSION_RESULT=success" >> $GITHUB_ENV
          else
            # 创建失败标记文件
            echo "未找到有效内核分支" > failure.txt
            7z a "../$ARCHIVE_NAME" failure.txt
            echo "COMPRESSION_RESULT=failure" >> $GITHUB_ENV
          fi

      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.WORK_DIR }}/../${{ env.ARCHIVE_NAME }}
          retention-days: 7
